#!/bin/bash
# ffpcsync - Firefox profile cache synchronizer for XFCE genmon plugin
# Copyright (C) 2013 Digirium, see <https://github.com/Digirium/>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

cd $HOME/.mozilla 2>/dev/null || exit 1

iconfile=$HOME/.genmon-icon/ffpcsync.png
cachedir=/dev/shm/firefox.$(id -u)
beverbose=no

ff_running=no
[[ -n "$(find -L firefox -name lock -print)" ]] && ff_running=yes

exit_if_ff_running ()
{
	if [[ $ff_running == yes ]]
	then
		[[ $beverbose = yes ]] && echo "stop firefox before running $1"
		exit 2
	fi
}

# Manual option to perform an operation to defragment and reindex all of the
# databases used by firefox. Make sure firefox is not running. Usually, the result
# is reduced start up time for firefox. However, there is risk that the operation
# may render the databases inoperative with firefox. Therefore use this at your
# own peril!! NB firefox defragments certain databases monthly.
defragment_sqlite_db ()
{
	exit_if_ff_running "defragment operation"

	allsql=$(find -L firefox -name '*.sqlite' -print)

	if [[ $beverbose == yes ]]
	then
		total=$(du -bc $allsql | awk '$2 == "total" { print $1 }')
		echo "Total before defragmenting $(echo "scale=2; $total/1048576" | bc)MB"
	fi

	for sql in $allsql
	do
		[[ $beverbose == yes ]] && printf "  %-50s" "defragmenting $(basename $sql)"
		sqlite3 "$sql" "vacuum; reindex"
		[[ $beverbose == yes ]] && printf "[done]\n"
	done

	if [[ $beverbose == yes ]]
	then
		total=$(du -bc $allsql | awk '$2 == "total" { print $1 }')
		echo "Total after defragmenting $(echo "scale=2; $total/1048576" | bc)MB"
	fi
}

sync_memory_cache_to_disk ()
{
	rsync -a --delete --exclude=lock --delete-excluded ./firefox/ ./firefox.disk/
}

restore_original_profile_folder ()
{
	exit_if_ff_running "restore operation"

	# Criteria check. If it succeeds, remove the link to the cache directory
	# and move the disk profile to the original name. The memory cache may or may
	# not exist. If it does, synchronize it with disk and remove it.
	if [[ -d firefox.disk && -h firefox && $(readlink firefox) == $cachedir ]]
	then
		[[ -d $cacehdir ]] && sync_memory_cache_to_disk
		rm -rf $cachedir 2>/dev/null
		rm firefox && mv firefox.disk firefox && echo "firefox profile is restored"
	else
		echo "restore profile operation failed to match criteria"
	fi
}

while getopts ":drsvw" opt
do
	case $opt in
	d)
		# Run defragment operation without outputting genmon XML.
		# NB understand the risk involved.
		beverbose=yes
		defragment_sqlite_db
		exit 0
		;;
	r)
		# Restore the original firefox profile folder.
		restore_original_profile_folder
		exit 0
		;;
	s)
		# Manually initiated sync operation, usable for example just before
		# logging out and/or shutting down the system. Ensures that the disk
		# copy of the profile is updated. Does not output genmon XML.
		[[ -d $cachedir ]] && sync_memory_cache_to_disk
		exit 0
		;;
	v)
		echo "ffpcsync 1.0.2 - (C) 2013 Digirium, see <https://github.com/Digirium>"
		echo "Released under the GNU GPL."
		exit 0
		;;
	w)
		# Wrapper mode. Runs firefox and then runs a sync operation to ensure
		# that the disk copy of the profile is up to date. Used by the click
		# option in the genmon XML that is outputted.
		if [[ -d firefox.disk && -h firefox && $(readlink firefox) == $cachedir && $ff_running = no ]]
		then
			/usr/bin/firefox 1>/dev/null 2>&1
			sync_memory_cache_to_disk
		fi
		exit 0
		;;
	*)
		echo "Invalid option: -$OPTARG"
		exit 3
		;;
	esac
done

if [[ -d $cachedir ]]
then
	# Synchronize the cache to disk. The interval is whatever is specified to the
	# generic monitor plugin that calls this script (e.g. 600 seconds).
	sync_memory_cache_to_disk
else
	exit_if_ff_running "cache setup"

	# Cache needs to be created again after each login/restart.
	mkdir -m0700 $cachedir

	# The disk copy of firefox profile and the symbolic link to the cache are
	# persistent once they have been established. After the first time they both
	# stay as they are until at some point memory caching is turned off.
	[[ ! -d firefox.disk ]] && mv firefox firefox.disk
	[[ ! -h firefox ]] && ln -s $cachedir firefox

	# Populate the memory cache.
	rsync -a ./firefox.disk/ ./firefox/

	# Uncomment line below if you want to defragment databases automatically when
	# the memory cache is initialized. NB understand the risk involved.
	# defragment_sqlite_db
fi


### XFCE GENMON XML ###

cat <<EOF
<img>$iconfile</img>
<tool>Memory cache size: $(du -sm $cachedir | awk '{ print $1 }')MB
Last synchronized: $(date)</tool>
<click>$0 -w</click>
EOF

exit 0
